table(0.083)
rownames(table(0.083)) <- "Leemis m"
class(rbind(table(final.list), c("1***",2,3,4,5)))
matrix(0.083, rownames="Leemis m")
matrix("0.083***")
rownames(matrix("0.083***") <- "Leemis"
asd
rownames(matrix("0.083***")) <- "Leemis"
our.table <- matrix("0.083***")
our.table <- rownames("Leemis m")
our.table
our.table <- matrix("0.083***")
rownames(our.table) <- "Leemis m"
our.table
our.table <- matrix("0.083***")
rownames(our.table) <- "Leemis m"
colnames(our.table) <- "Statistic"
our.table
paste("|||","Statistic","|||")
paste("|||","Statistic","|||"\n"||")
paste("|||","Statistic","|||\n||")
paste("|||","Statistic","|||\\n||")
cat(paste("|||","Statistic","|||||")\n)
paste(our.table)
paste(our.table, "asd;f")
cat(our.table, "asd;f")
cat(our.table, "\nasd;f")
our.table <- matrix("0.083***")
rownames(our.table) <- "Leemis m"
colnames(our.table) <- "Statistic"
cat(our.table, "\nasd;f")
our.table <- matrix("0.083***")
rownames(our.table) <- "Leemis m"
colnames(our.table) <- "Statistic"
our.table
our.table
cat(our.table, "\nasd;f")
our.table <- matrix("0.083***", "* denotes p<0.1, **: p<0.05, ***:p<0.01")
data.frame("0.083***", "* denotes p<0.1, **: p<0.05, ***:p<0.01")
data.frame("0.083***", "* denotes p<0.1, **: p<0.05, ***:p<0.01", nrow=2)
matrix("0.083***")
matrix("0.083***", "* denotes p<0.1, **: p<0.05, ***:p<0.01")
matrix("0.083***", "* denotes p<0.1 **: p<0.05 ***:p<0.01")
t(data.frame("0.083***", "* denotes p<0.1 **: p<0.05 ***:p<0.01"))
our.table <- t(data.frame("0.083***", "* denotes p<0.1 **: p<0.05 ***:p<0.01"))
rownames(our.table) <- c("Leemis m","")
our.table
our.table <- t(data.frame(0.083***, * denotes p<0.1 **: p<0.05 ***:p<0.01))
colnames(our.table) <- "Statistic"
our.table
our.table <- t(data.frame("0.083***", "* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("Leemis m","")
rownames(our.table) <- "Leemis m"
colnames(our.table) <- "Statistic"
our.table
rbind(table(final.list), c("1***",2,3,4,5))
our.table <- t(data.frame("0.083***", "0.257","* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("Leemis m","","Cho-Gains d")
colnames(our.table) <- "Statistic"
our.table
rownames(our.table) <- c("Leemis m","Cho-Gains d","")
colnames(our.table) <- "Statistic"
our.table
print.benfords <- function(input, Leemis=T, ChoGains=T){
violations_calculator(input, Leemis, ChoGains)
our.table <- t(data.frame("0.083***", "0.257","* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("Leemis m","Cho-Gains d","")
colnames(our.table) <- "Statistic"
}
print.benfords(vote.matrix)
violations_calculator <- function(input, Leemis=T, ChoGains=T){
# Ensuring user inputs electoral returns in proper manner
# Checks to see if object input is integer vector or matrix. If not, function stops running,
# and provides informative error message
if(class(input) %in% c("integer","matrix")) {
} else {
stop("Please input election returns in integer vector or matrix format.")
}
# Ensuring that, if a matrix is input, it can be coerced to numeric vector
# And then doing such a manouver
# That is, ensuring the user inputs raw vote totals, not letters or something
if(class(input) == "matrix") {
input <- c(input)
if(class(input) != "integer"){
stop("Please fix your matrix to remove any non-integer values.")
}
}
# Now, turning to calculating our statistics of interest
# First, creating frequency table of distribution of all first significant digits
first_digit_dist <- prop.table(table(substr(input, start=1, stop=1)))
# Creating list to output variables to
final_list <- list(digit_distribution=first_digit_dist)
# Then, calculating the Leemis m statistic if Leemis=T and assigning it to the list
if(Leemis==T){
m <- max(first_digit_dist - log10(1 + 1/c(1:9)))
final_list <- c(final_list, m_statistic=m)
}
# Calculating the Cho-Gains d statistic if ChoGains=T and assigning it to the list
if(ChoGains==T){
d <- sqrt(sum((first_digit_dist - log10(1 + 1/c(1:9)))^2))
final_list <- c(final_list, d_statistic=d)
}
# Output. Distribution table will always be reported
return(final_list)
}
# Checking to see how the function does
# set.seed(10)
# vote.shares <- sample(10000:99999, 50, replace=T)
#
# vote.matrix <- matrix(vote.shares, nrow=10)
# wrong.matrix <- matrix(c("a","b","c","d"), nrow=2)
#
# violations_calculator(vote.shares) # works
# violations_calculator(vote.matrix) # works, matrix converted to vector within function
# violations_calculator(wrong.matrix) # won't work, not all integers
# violations_calculator(vote.shares, Leemis=T, ChoGains=F)
#### Problem 2 ####
print.benfords <- function(input, Leemis=T, ChoGains=T){
violations_calculator(input, Leemis, ChoGains)
our.table <- t(data.frame("0.083***", "0.257","* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("Leemis m","Cho-Gains d","")
colnames(our.table) <- "Statistic"
}
print.benfords(vote.matrix)
violations_calculator(vote.matrix)
print.benfords(vote.matrix)
print.benfords <- function(input, Leemis=T, ChoGains=T){
earlier.list <- violations_calculator(input, Leemis, ChoGains)
print(earlier.list)
our.table <- t(data.frame("0.083***", "0.257","* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("Leemis m","Cho-Gains d","")
colnames(our.table) <- "Statistic"
}
print.benfords(vote.matrix)
print.benfords(wrong.matrix)
leemis_cutoffs <- c(.851, .967, 1.212)
d > leemis_cutoffs
sum(d > leemis_cutoffs)
sum(2 > leemis_cutoffs)
sum(1 > leemis_cutoffs)
stars <- c("","*","**","***")
stars[1]
stars[2]
stars[3]
stars[4]
print.benfords <- function(input, Leemis=T, ChoGains=T){
# Recursively calling earlier function with inputs as specified by this function's arguments
earlier_list <- violations_calculator(input, Leemis, ChoGains)
# Critical values for each statistic
leemis_cutoffs <- c(.851, .967, 1.212)
cho_gains_cutoffs <- c(1.212, 1.330, 1.569)
# Vector of stars
stars <- c("","*","**","***")
if(Leemis=T){
leemis_critical <- sum(earlier_list$m_statistic > leemis_cutoffs)
leemis_stars <- stars[leemis_critical + 1]
}
if(Leemis=T){
our.table <- t(data.frame(paste(earlier_list$m_statistic, leemis_stars),"* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("Leemis m","")
colnames(our.table) <- "Statistic"
}
print(our.table)
}
print.benfords <- function(input, Leemis=T, ChoGains=T){
# Recursively calling earlier function with inputs as specified by this function's arguments
earlier_list <- violations_calculator(input, Leemis, ChoGains)
# Critical values for each statistic
leemis_cutoffs <- c(.851, .967, 1.212)
cho_gains_cutoffs <- c(1.212, 1.330, 1.569)
# Vector of stars
stars <- c("","*","**","***")
if(Leemis==T){
leemis_critical <- sum(earlier_list$m_statistic > leemis_cutoffs)
leemis_stars <- stars[leemis_critical + 1]
}
if(Leemis==T){
our.table <- t(data.frame(paste(earlier_list$m_statistic, leemis_stars),"* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("Leemis m","")
colnames(our.table) <- "Statistic"
}
print(our.table)
}
print.benfords(vote.shares)
print.benfords <- function(input, Leemis=T, ChoGains=T){
# Recursively calling earlier function with inputs as specified by this function's arguments
earlier_list <- violations_calculator(input, Leemis, ChoGains)
# Critical values for each statistic
leemis_cutoffs <- c(.851, .967, 1.212)
cho_gains_cutoffs <- c(1.212, 1.330, 1.569)
# Vector of stars
stars <- c("","*","**","***")
if(Leemis==T){
leemis_critical <- sum(earlier_list$m_statistic > leemis_cutoffs)
leemis_stars <- stars[leemis_critical + 1]
}
if(Leemis==T){
our.table <- t(data.frame(paste(round(earlier_list$m_statistic,5), leemis_stars),"* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("Leemis m","")
colnames(our.table) <- "Statistic"
}
print(our.table)
}
print.benfords(vote.shares)
votes2 <- c(1,1,1,1,1,1,1,1,1,1)
print.benfords(votes2)
votes2
class(votes2)
votes2 <- as.integer(c(1,1,1,1,1,1,1,1,1,1))
print.benfords(votes2)
print.benfords <- function(input, Leemis=T, ChoGains=T){
# Recursively calling earlier function with inputs as specified by this function's arguments
earlier_list <- violations_calculator(input, Leemis, ChoGains)
# Critical values for each statistic
leemis_cutoffs <- c(.851, .967, 1.212)
cho_gains_cutoffs <- c(1.212, 1.330, 1.569)
# Vector of stars
stars <- c("","*","**","***")
if(Leemis==T){
leemis_critical <- sum(earlier_list$m_statistic > leemis_cutoffs)
leemis_stars <- stars[leemis_critical + 1]
}
if(Leemis==T){
our.table <- t(data.frame(paste(round(earlier_list$m_statistic,5), leemis_stars, sep=""),"* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("Leemis m","")
colnames(our.table) <- "Statistic"
}
print(our.table)
}
votes2 <- as.integer(c(1,1,1,1,1,1,1,1,1,1))
print.benfords(votes2)
t(data.frame("* denotes p<0.1, **: p<0.05, ***:p<0.01"))
our.table <- t(data.frame("* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("")
our.table
rbind(234, our.table)
our.table <- t(data.frame("* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("")
colnames(our.table) <- "Statistic"
our.table
our.table <- rbind(paste(33, "leemis_stars"**", sep=""))
)
asd
09u24
asdf
a
quit
breka
break
))))))
rownames(our.table)[1] <- c("Leemis m")
our.table
rbind(paste("round(earlier_list$m_statistic,5)", leemis_stars, sep=""))
rbind(paste("round(earlier_list$m_statistic,5)", "leemis_stars", sep=""))
our.table <- rbind(paste("round(earlier_list$m_statistic,5)", "leemis_stars", sep=""))
our.table
our.table <- t(data.frame("* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("")
colnames(our.table) <- "Statistic"
our.table <- rbind(paste("round(earlier_list$m_statistic,5)", "leemis_stars", sep=""), our.table)
our.table
rownames(our.table)[1] <- c("Leemis m")
our.table
print.benfords <- function(input, Leemis=T, ChoGains=T){
# Recursively calling earlier function with inputs as specified by this function's arguments
earlier_list <- violations_calculator(input, Leemis, ChoGains)
# Critical values for each statistic
leemis_cutoffs <- c(.851, .967, 1.212)
cho_gains_cutoffs <- c(1.212, 1.330, 1.569)
# Vector of stars
stars <- c("","*","**","***")
if(Leemis==T){
leemis_critical <- sum(earlier_list$m_statistic > leemis_cutoffs)
leemis_stars <- stars[leemis_critical + 1]
}
if(ChoGains==T){
chogains_critical <- sum(earlier_list$d_statistic > cho_gains_cutoffs)
chogains_stars <- stars[chogains_critical + 1]
}
our.table <- t(data.frame("* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("")
colnames(our.table) <- "Statistic"
if(Leemis==T){
our.table <- rbind(paste(round(earlier_list$m_statistic,5), leemis_stars, sep=""), our.table)
rownames(our.table)[1] <- c("Leemis m")
}
if(ChoGains==T){
our.table <- rbind(paste(round(earlier_list$d_statistic,5), chogains_stars, sep=""), our.table)
rownames(our.table)[2] <- c("Cho gains d","")
}
print(our.table)
}
print.benfords(vote.shares)
print.benfords <- function(input, Leemis=T, ChoGains=T){
# Recursively calling earlier function with inputs as specified by this function's arguments
earlier_list <- violations_calculator(input, Leemis, ChoGains)
# Critical values for each statistic
leemis_cutoffs <- c(.851, .967, 1.212)
cho_gains_cutoffs <- c(1.212, 1.330, 1.569)
# Vector of stars
stars <- c("","*","**","***")
if(Leemis==T){
leemis_critical <- sum(earlier_list$m_statistic > leemis_cutoffs)
leemis_stars <- stars[leemis_critical + 1]
}
if(ChoGains==T){
chogains_critical <- sum(earlier_list$d_statistic > cho_gains_cutoffs)
chogains_stars <- stars[chogains_critical + 1]
}
our.table <- t(data.frame("* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("")
colnames(our.table) <- "Statistic"
if(Leemis==T){
our.table <- rbind(paste(round(earlier_list$m_statistic,5), leemis_stars, sep=""), our.table)
rownames(our.table)[1] <- c("Leemis m")
}
if(ChoGains==T){
our.table <- rbind(paste(round(earlier_list$d_statistic,5), chogains_stars, sep=""), our.table)
rownames(our.table)[1] <- c("Cho gains d")
}
print(our.table)
}
print.benfords(vote.shares)
votes2 <- as.integer(c(1,1,1,1,1,1,1,1,1,1))
print.benfords(votes2)
sink(print.benfords(votes2), file="tableoutput.csv")
sink(file="tableoutput.csv")
print.benfords(votes2)
sink()
setwd("~/github/PS2") # Setting working directory
sink(file="tableoutput.csv")
print.benfords(votes2)
sink()
setwd("~/github/PS2") # Setting working directory
#### Problem 1 ####
## Function for calculating Leemis m and Cho Gains d statistics
#'
#' This function takes an input of electoral returns and (optionally) calculates the corresponding
#' Leemis' m and Cho Gains' d statistics.
#' @param input An object with the class integer or matrix. If matrix, should be all integer values.
#' @param Leemis Takes the value of TRUE or FALSE, where TRUE indicates that the function should
#' calculate and return the Leemis' m statistic.
#' @param ChoGains Takes the value of TRUE or FALSE, where TRUE indicates that the function should
#' calculate and return the Cho Gains' d statistic.
#' @return A list with three elements: a frequency table of distribution of all first significant
#' digits of the elements within input, (if Leemis=T) the Leemis' m statistic, (if ChoGains=T) the
#' Cho Gains' d statistic.
#'
#' @author Andy Stone.
violations_calculator <- function(input, Leemis=T, ChoGains=T){
# Ensuring user inputs electoral returns in proper manner
# Checks to see if object input is integer vector or matrix. If not, function stops running,
# and provides informative error message
if(class(input) %in% c("integer","matrix")) {
} else {
stop("Please input election returns in integer vector or matrix format.")
}
# Ensuring that, if a matrix is input, it can be coerced to numeric vector
# And then doing such a manouver
# That is, ensuring the user inputs raw vote totals, not letters or something
if(class(input) == "matrix") {
input <- c(input)
if(class(input) != "integer"){
stop("Please fix your matrix to remove any non-integer values.")
}
}
# Now, turning to calculating our statistics of interest
# First, creating frequency table of distribution of all first significant digits
first_digit_dist <- prop.table(table(substr(input, start=1, stop=1)))
# Creating list to output variables to
final_list <- list(digit_distribution=first_digit_dist)
# Then, calculating the Leemis m statistic if Leemis=T and assigning it to the list
if(Leemis==T){
m <- max(first_digit_dist - log10(1 + 1/c(1:9)))
final_list <- c(final_list, m_statistic=m)
}
# Calculating the Cho-Gains d statistic if ChoGains=T and assigning it to the list
if(ChoGains==T){
d <- sqrt(sum((first_digit_dist - log10(1 + 1/c(1:9)))^2))
final_list <- c(final_list, d_statistic=d)
}
# Output. Distribution table will always be reported
return(final_list)
}
# Checking to see how the function does
# set.seed(10)
# vote.shares <- sample(10000:99999, 50, replace=T)
#
# vote.matrix <- matrix(vote.shares, nrow=10)
# wrong.matrix <- matrix(c("a","b","c","d"), nrow=2)
#
# violations_calculator(vote.shares) # works
# violations_calculator(vote.matrix) # works, matrix converted to vector within function
# violations_calculator(wrong.matrix) # won't work, not all integers
# violations_calculator(vote.shares, Leemis=T, ChoGains=F)
#### Problem 2 ####
## Function for hypothesis testing of Leemis m and Cho Gains d statistics
#'
#' This function takes an input of electoral returns and (optionally) conducts a hypothesis test
#' of electoral fraud utilizing Leemis' m and Cho Gains' d statistics. This function recursively
#' calls the violations_function defined above.
#' @param input An object with the class integer or matrix. If matrix, should be all integer values.
#' @param Leemis Takes the value of TRUE or FALSE, where TRUE indicates that the function should
#' test the null hypothesis of no electoral fraud using the Leemis' m statistic.
#' @param ChoGains Takes the value of TRUE or FALSE, where TRUE indicates that the function should
#' test the null hypothesis of no electoral fraud using the Cho Gains' d statistic.
#' @return A table that denotes the name of each test statistic, the value of the test statistic,
#' asterisks denoting the statistical significance of the test statistic, and a legend explaining
#' the level of statistical significance the asterisks denote.
#'
#' @author Andy Stone.
print.benfords <- function(input, Leemis=T, ChoGains=T){
# Recursively calling earlier function with inputs as specified by this function's arguments
earlier_list <- violations_calculator(input, Leemis, ChoGains)
# Critical values for each statistic
leemis_cutoffs <- c(.851, .967, 1.212)
cho_gains_cutoffs <- c(1.212, 1.330, 1.569)
# Vector of stars
stars <- c("","*","**","***")
if(Leemis==T){
leemis_critical <- sum(earlier_list$m_statistic > leemis_cutoffs)
leemis_stars <- stars[leemis_critical + 1]
}
if(ChoGains==T){
chogains_critical <- sum(earlier_list$d_statistic > cho_gains_cutoffs)
chogains_stars <- stars[chogains_critical + 1]
}
our.table <- t(data.frame("* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("")
colnames(our.table) <- "Statistic"
if(Leemis==T){
our.table <- rbind(paste(round(earlier_list$m_statistic,5), leemis_stars, sep=""), our.table)
rownames(our.table)[1] <- c("Leemis m")
}
if(ChoGains==T){
our.table <- rbind(paste(round(earlier_list$d_statistic,5), chogains_stars, sep=""), our.table)
rownames(our.table)[1] <- c("Cho gains d")
}
return(our.table)
}
votes2 <- as.integer(c(1,1,1,1,1,1,1,1,1,1))
sink.benfords <- function(input, Leemis=T, ChoGains=T, filepath=NULL){
sink(file=filepath)
print.benfords(input)
sink()
}
sink.benfords(votes2, filepath="table2.csv")
print.benfords <- function(input, Leemis=T, ChoGains=T){
# Recursively calling earlier function with inputs as specified by this function's arguments
earlier_list <- violations_calculator(input, Leemis, ChoGains)
# Critical values for each statistic
leemis_cutoffs <- c(.851, .967, 1.212)
cho_gains_cutoffs <- c(1.212, 1.330, 1.569)
# Vector of stars
stars <- c("","*","**","***")
if(Leemis==T){
leemis_critical <- sum(earlier_list$m_statistic > leemis_cutoffs)
leemis_stars <- stars[leemis_critical + 1]
}
if(ChoGains==T){
chogains_critical <- sum(earlier_list$d_statistic > cho_gains_cutoffs)
chogains_stars <- stars[chogains_critical + 1]
}
our.table <- t(data.frame("* denotes p<0.1, **: p<0.05, ***:p<0.01"))
rownames(our.table) <- c("")
colnames(our.table) <- "Statistic"
if(Leemis==T){
our.table <- rbind(paste(round(earlier_list$m_statistic,5), leemis_stars, sep=""), our.table)
rownames(our.table)[1] <- c("Leemis m")
}
if(ChoGains==T){
our.table <- rbind(paste(round(earlier_list$d_statistic,5), chogains_stars, sep=""), our.table)
rownames(our.table)[1] <- c("Cho gains d")
}
print(our.table)
}
# rbind(table(final.list), c("1***",2,3,4,5))
# More practice
# Writing table output to a csv using sink()
sink(file="tableoutput.csv") # Specify the file (within current working directory defined at top)
print.benfords(votes2) # Output of this, the table, will be saved to the csv
sink() # Closing diversion of output to csv
sink.benfords <- function(input, Leemis=T, ChoGains=T, filepath=NULL){
sink(file=filepath)
print.benfords(input)
sink()
}
sink.benfords(votes2, filepath="table2.csv")
paste("~/github/PS2","/table.csv",sep="")
sink.benfords(input=votes2, directory="~/github/PS2",filename="tableoutput.csv")
sink.benfords <- function(input, Leemis=T, ChoGains=T, directory=NULL, filename="table.csv"){
sink(file=paste(directory, filename, sep=""))
print.benfords(input)
sink()
}
sink.benfords(input=votes2, directory="~/github/PS2",filename="tableoutput.csv")
sink.benfords(input=votes2, directory="~/github/PS2/",filename="tableoutput.csv")
file.exists("~/github/PS2")
file.exists("~/github/PS2/")
sink.benfords(input=votes2, directory="~/github/PS2",filename="/tableoutput.csv")
dir.exists("~/github/PS2")
file.exists("~/github/PS23")
sink.benfords <- function(input, Leemis=T, ChoGains=T, directory=NULL, filename="/table.csv"){
if (file.exists(directory) == T){
sink(file=paste(directory, filename, sep=""))
print.benfords(input)
sink()
} else{
stop("Invalid directory. Please specify a valid directory to save the file within.")
}
}
sink.benfords(input=votes2, directory="~/github/PS23",filename="/tableoutput.csv")
